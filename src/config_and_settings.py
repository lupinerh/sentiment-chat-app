import logging
import os
import yaml
import streamlit as st

from streamlit.errors import StreamlitSecretNotFoundError
from dotenv import load_dotenv

def get_gemini_key():
    api_key = None
    try:
        if "gemini" in st.secrets and "api_key" in st.secrets['gemini']:
            api_key = st.secrets['gemini']['api_key']
            if api_key:
                return api_key
    except StreamlitSecretNotFoundError:
        pass

    load_dotenv()
    api_key = os.environ.get("GEMINI_API_KEY")
    if api_key:
        return api_key
    
    logging.error("–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º Gemini, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
    st.error("–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º Gemini, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
    st.stop()

GEMINI_API_KEY = get_gemini_key()

class SessionKeys:
    CHAT_HISTORY = "chat_history"
    USER_DRAFT_INPUT = "user_draft_input_text"
    USER_DATA_FOR_BOT = "user_data_for_bot"
    MODELS_LOADED = "models_loaded"
    SELECTED_SENTIMENT_MODEL = "selected_sentiment_model"
    SENTIMENT_MODELS_DICT = "sentiment_models_dict"
    LLM_CHATBOT = "llm_chatbot"
    BOT_IS_TYPING = "bot_is_typing"

MODEL_ID_LOGREG = "logreg"
MODEL_ID_BERT = "bert"

CONFIG_PATH = 'config.yaml'
SENTIMENT_THRESHOLD = 0.2
EMPTY_TEXT_PLACEHOLDER = "–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å..."

WELCOME_TITLE = "## üí¨ –ß–∞—Ç —Å –ê–Ω–∞–ª–∏–∑–æ–º –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
WELCOME_SUBHEADER = (
    "–Ø –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é –∏ —É–º–µ—é –ø–æ–Ω–∏–º–∞—Ç—å —ç–º–æ—Ü–∏–∏ –≤ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.  \n"
    "–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—É –≤ –ø–æ–ª–µ —Å–ª–µ–≤–∞, –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ "
    "–∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.  \n"
    "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ '‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç', "
    "—á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞—à –¥–∏–∞–ª–æ–≥!  \n"
)
WELCOME_EXAMPLES_HEADER = "üí° **–ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞:**"
WELCOME_EXAMPLES = [
    "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
    "–£ –º–µ–Ω—è —Ç–∞–∫–æ–π —Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å —Å–µ–≥–æ–¥–Ω—è, –∫–∞–∫ —Ç–≤–æ–π?",
    "–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ —Å–µ–±–µ."
]

# css style for sentiment model selector
SELECTED_BUTTON_CSS = """
    button {
        border-radius: 12px; padding: 10px 15px !important; font-size: 16px !important;
        font-weight: bold !important; border: 2px solid transparent !important;
        background-color: #D6EAF8 !important; color: black !important; border-color: #AED6F1 !important;
        box-shadow: 0 2px 5px rgba(214, 234, 248, 0.3) !important;
    }
    """
UNSELECTED_BUTTON_CSS = """
    button {
        border-radius: 12px; padding: 10px 15px !important; font-size: 16px !important;
        font-weight: bold !important; border: 2px solid transparent !important;
        background-color: #F0F0F0 !important; color: #A0A0A0 !important; border-color: #E0E0E0 !important;
        box-shadow: 0 1px 2px rgba(0,0,0,0.05) !important;
    }
    """

@st.cache_data
def load_config(config_path: str = CONFIG_PATH) -> dict:
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        return config
    except FileNotFoundError:
        st.error(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return {}
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return {}
